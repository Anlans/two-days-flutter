### 第一课
Text(
  '内容'i,
  style: TextStyle(
    color: ,
    background: ,
    ...
  )
)


--------------------------------

Text.rich(
  TextSpan(
    children: [
      TextSpan('aaa'),
      TextSpan('bbb'),

    ]
  )

)





--------------------------------

DefaultTextStyle子节点,孙子,...的默认字体样式
用途: 整个程序/整个页面初始文本样式







--------------------------------
Color(0xxxx)

1.16进制
0xffff0000
ff alpha        0~255  00~ff
ff red
00 green
00 blue

2.分开写
Color.fromARGB(alpha, red, green, blue)
Color.fromRGBO(red, green, blue, opacity)


--------------------------------



3. Colors.red/green/blue

--------------------------------
### 第二课
Image
Image.asset     引入源码资源文件
Image.file      从用户本地文件系统读取
Image.network   读取网络的图片
Image.memory    从内存中读取图片


--------------------------------
越小越好--flutter尽量少的打包文件
需要我声明打包什么东西


--------------------------------
资源文件一定要先声明,不声明不打包

1.pubspec声明 => pubspec.yaml
flutter
  assets:
    - assets/a.png
    - assets/b.png

2.使用 => main.dart
  child: Image.assert('资源访问符')




--------------------------------
Image.asset(
  'src',
  width: xxx,
  height: xxx,
  fit: BoxFit.fitWidth,
);


--------------------------------

MediaQuery--媒体查询
  获取屏幕信息

var screen=MediaQuery.of(context); //context
screen.size.width
screen.size.height

--------------------------------
###第三课
Icon

Icon(
  Icon.favorite
  color: ,
  size: ,
);


--------------------------------
### 第四课
组件:
布局组件--搭架子
1.Container (容器)            单子级child:
  最普通的 (类似html中div)
  width
  height
  alignment

  decoration: BonxDecoration(
    color 背景色
    image
    border
  )




2.Expanded (扩展)             单子级child:
  占据尽可能大的空间

  Spacer()




3.Row/Colum (行/列)           多子级 children:


--------------------------------

4.Stack (堆栈)                多子级 children:
  类似绝对定位

  Container

  Positioned

  SingleChildScrollView



5.GridView (格子3x3 8x8 ....) 多子级 children:
  n*n

  主轴    mainAxis
  副轴    crossAxis





6.Table(表格)                 多自己 children:

Table(
  children: [
    TableRow(
      children: [
        Container(),
        Container(),
        Container(),
      ]
    )
  ]
)


--------------------------------
### 第五课
自适应 Row Column

### 第六课
堆叠Stack

--------------------------------
### 第七课
格子GridView


--------------------------------
### 第八课
表格Table


--------------------------------
### 第九课
路由:
  多个页面

1.路由干啥的
  管理多页面,按需要显示相应的页面

2.如何跳转页面
  历史记录--存在context上下文

  Navigator导航器
  Navigator.push(context, Route) 添加一级(删除当前节点后续所有节点)
  Navigator.pop(context)   回到上一级


    MaterialPageRoute(builder: (){
      return Page?();
    })


3.本质替换谁
  app.home会整个替换掉--每个页面都需要有完整的结构 (Scaffold)
```
import 'package:flutter/material.dart';

void main() {
  runApp(App());
}

class App extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {

    return MaterialApp(
      title: 'my first flutter',
      home: Page1(),
    );
  }
}

class Page1 extends StatelessWidget{
  Widget build(BuildContext context) {

    return Scaffold(
      appBar: AppBar(title: Text('页面1')),
      body: Column(
        children: [
          Text('页面111'),
          FlatButton(
            color: Colors.blue,
            child: Text('跳转到页面222'),
            onPressed: (){
              Navigator.push(context, MaterialPageRoute(builder: (context){
                return Page2();
              }));
            },
          ),
        ],
      ),
    );
  }
}
class Page2 extends StatelessWidget{
  Widget build(BuildContext context) {

    return Scaffold(
      appBar: AppBar(title: Text('页面2')),
      body: Column(
        children: [
          Text('页面222'),
          FlatButton(
            color: Colors.blue,
            child: Text('回到1'),
            onPressed: (){
              Navigator.pop(context);
            },
          ),
        ],
      ),
    );
  }
}
```

--------------------------------

###　第十课
传参
路由参数:



--------------------------------


Widget的key?

优化--判断组件是否替换的依据 (key)

--------------------------------
1.路由参数非常重要
2.所有的Widget都有key
  检测元件变化
3.Widget子类加构造器带上key
```
class Page2 extends StatelessWidget{
  final title;

  Page2({key, this.title}):super(key: key);
```

--------------------------------

路由表:
统一管理所有路由项



--------------------------------
1.不用路由表
  //不需要注册
```
Navigator.push(context, MaterialPageRoute(builder: (context){
    return Page2(title: 'aaa');
}));
```

final title;
Page2({Key, this.title}):super(key:key);


2.使用路由表
  //注册路由表
  MaterialApp(
    title: App标题,
    home: 初始展示页面,
    routes: {
     'name1': (context)=>Page1();
     'name2': (context)=>Page2();
    }
  );

  //直接靠名字跳转
  Navigator.pushNamed(context, 'name1', arguments: xxx);







Navigator.push(context, MaterialPageRoute(builder: (context){
    return Page2(title: 'aaa');
}));

--------------------------------
```
import 'package:flutter/material.dart';

void main() {
  runApp(App());
}

class App extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {

    return MaterialApp(
      title: 'my first flutter',
      routes: {
        'home': (context)=>Page1(),
        'page2': (context)=>Page2(),
      },
      home: Page1(),
    );
  }
}

class Page1 extends StatelessWidget{
  Widget build(BuildContext context) {

    return Scaffold(
      appBar: AppBar(title: Text('页面1')),
      body: Column(
        children: [
          Text('页面111'),
          FlatButton(
            color: Colors.blue,
            child: Text('跳转到页面222'),
            onPressed: (){
              Navigator.pushNamed(context, 'page2', arguments: {
                'title': 'aaa',
                'aa': 12,
              });
            },
          ),
        ],
      ),
    );
  }
}


class Page2 extends StatelessWidget{

  Page2({key}):super(key: key);

  @override
  Widget build(BuildContext context) {
    var args=ModalRoute.of(context).settings.arguments as Map;
    var title=args['title'];

    return Scaffold(
      appBar: AppBar(title: Text('页面2')),
      body: Column(
        children: [
          Text('页面222$title'),
          FlatButton(
            color: Colors.blue,
            child: Text('回到1'),
            onPressed: (){
              Navigator.pop(context);
            },
          ),
        ],
      ),
    );
  }
}
```

--------------------------------
### 第十一课
动态路由:
登录?
page2 ->Page2()
      ->Login()

--------------------------------

1.需要app完全接管路由
  不能写home
  initialRoute: '/'

  name不能乱写--写成路径

  onGenerateRoute:(settings) {
    return MaterialPageRoute(builder: (context){
      return Page2();

      return Login();
    });
  }



--------------------------------
### 第十二课
状态管理
1.局部状态
  StatefulWidget
    setState((){

    });



  HookWidget
    更方便
--------------------------------
父->子        啥都不用做

子->父        子级不能直接修改父级的东西,应该通知父级

***状态属于谁,由谁修改***

--------------------------------




--------------------------------

2.全局状态
hook
flutter_redux_hooks

redux
1.reducer -- 状态+action=>新状态
2.创建store对象
3.Provider对象 StoreProvider


--------------------------------
1.三个库
  redux => Store => state+reduer

  flutter_redux_hooks => StoreProvider
    useSelector
    useDispatch

  flutter_hooks => HookWidget

2.流程
  1.reducer函数   oldState+action => newState
  2.Store对象
    var store=Store<StateType>(reducer, initialState: 初始状态);
  3.StoreProvider
    runApp(StoreProvider(
      store: store,
      child: App(),
    ));

3.操作数据
  useSelector  获取数据,State非常复杂
  useDispatch  dispatch(action)




--------------------------------
### 第十三课
全局状态管理
2.全局状态
hook
flutter_redux_hooks

redux
1.reducer -- 状态+action=>新状态
2.创建store对象
3.Provider对象 StoreProvider


--------------------------------
1.三个库
  redux => Store => state+reduer

  flutter_redux_hooks => StoreProvider
    useSelector
    useDispatch

  flutter_hooks => HookWidget

2.流程
  1.reducer函数   oldState+action => newState
  2.Store对象
    var store=Store<StateType>(reducer, initialState: 初始状态);
  3.StoreProvider
    runApp(StoreProvider(
      store: store,
      child: App(),
    ));

3.操作数据
  useSelector  获取数据,State非常复杂
  useDispatch  dispatch(action)

```
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart' show HookWidget, useState;
import 'package:flutter_redux_hooks/flutter_redux_hooks.dart';
import 'package:redux/redux.dart';

enum Actions {
  Add
}

int reducer(int state, action){
  switch(action) {
    case Actions.Add:
      return state+1;
      break;
    default:
      throw Error();
  }

}


void main() {
  // runApp(App());

  //2.创建store对象
  var store=Store<int>(reducer, initialState: 8);

  //3.启动app
  runApp(StoreProvider(
    store: store,
    child: App(),
  ));
}




class App extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title:'my first flutter',
      home: Page1(),
    );

  }
}

class Page1 extends StatelessWidget{
  Widget build(BuildContext context) {
    // var a=useState(0);

    return Scaffold(
      appBar: AppBar(title: Text('页面1')),
      body: Column(
        children: [
          Cmp1(),
          Cmp2(),
        ],
      ),
    );
  }

}

class Cmp1 extends HookWidget{
  Widget build(BuildContext context) {
    var count=useSelector<int, int>((state){
      return state;
    });

    var dispatch=useDispatch<int>();

    return Container(
      width: 150,
      height: 50,
      decoration: BoxDecoration(
        color: Colors.yellow,
      ),
      child: Row(
        children: [
          Text('count: $count'),
          FlatButton(
            color: Colors.blue,
            child: Text('++'),
            onPressed: (){
              dispatch(Actions.Add);
            },
          ),
        ],
      ),
    );
  }
}

class Cmp2 extends HookWidget{
  Widget build(BuildContext context) {
    var count=useSelector<int, int>((state){
      return state;
    });
    return Container(
      width: 100,
      height: 50,
      decoration: BoxDecoration(
        color: Colors.blue,
      ),
      child: Text('count: $count'),
    );
  }
}
```


### 第十四课
续全局状态管理 -- flutter原生实现

1.定义: 给某个组件加入状态对象
  可以给App,也可以给其他组件--灵活
  大部分情况: 整个应用共享--App

2.使用:先找自己,父级,父级的父级,....,App级

--------------------------------
flutter没有提供全局状态管理功能
flutter提供了一种功能: 可以帮助你沿着Widget树往上去找特定类型的对象

--------------------------------

depend On Inherited Widget Of Exact Type


InheritedWidget -- 被查找功能,没有任何功能,可以被找到
StatefulWidget  rebuild的提供者

--------------------------------
###　第十五课　
表单

Checkbox(
  value: state.value,
  tristate: bool,
  onChanged(val){
    state.value=val;
  },
)


--------------------------------
Switch(
  value: state.value,
  onChanged: (val){
    state.value=val;
  },
)




--------------------------------
### 第十六课
输入框,文本框

var controller=TextEditingController();
TextField(
  controller: controller,
)

//获取
controller.text

//设置
controller.text='xxxx';


--------------------------------

var controller=TextEditingController();
var focusNode=FocusNOde();

TextField(
  controller: controller,
  focusNode: focusNode,
);

controller.text
focusNode.requestFocus();  //设置焦点
focusNode.unfocus();        //去掉焦点

--------------------------------

TextField(
  controller,
  focusNode,
  icon,
  labelText,
  ...

  obscureText: true,
)


--------------------------------
### 第十七课
表单--form使用

TextFormField

Form(
  key:
  child: Column()
)
TextFormField(
  decoration: InputDecoration(),
  onSaved: (val){}
)

DropdownButtonFormField



--------------------------------




--------------------------------


--------------------------------



--------------------------------


--------------------------------



--------------------------------


--------------------------------








--------------------------------











